#!/usr/bin/env node
// *=> imports
const server = require('../app')

server.use((req, res, next) => res.json({ status: 'ko', msg: 'not-found' }))

server.use((err, req, res, next) => {
    // always og the error
    console.log('ERROR:', req.method, req.path, err)

    // only render if the error ocurred before sending the response
    if (!res.headersSend) res.json({ status: 'ko', msg: 'error' })
})


server.on('error', err => {
    if (err.syscall != 'listen') throw err

    switch (err.code) {
        case 'EACCES':
            console.error(`Port ${process.env.PORT} requires elevated privileges`)
            process.exit(1)

        case 'EADDRINUSE':
            console.error(`Port ${process.env.PORT} is already in use`)
            process.exit(1)

        default: throw err
    }
})

console.log('VARIABLE DE ENTORNO', process.env.ENV)

server.listen(process.env.PORT, () => console.log(`Listening on Port:${process.env.PORT}`))